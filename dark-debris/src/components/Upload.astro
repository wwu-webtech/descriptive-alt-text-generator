---
interface Props {
  key: string;
  endpoint: string;
}

const { key, endpoint } = Astro.props;
---

<astro-upload data-endpoint={endpoint} data-key={key}>
  <div class="wwu-card horizontal dark-blue-bg">
    <div class="body">
  <form style={{ marginTop: "20px", marginBottom: "20px" }}>
    <label for="file">File</label>
    <input
      type="file"
      id="file-input"
      accept=".png,.jpg,.jpeg"
      style={{ width: "100%" }}
    />
    <label for="prompt">Prompt <i>[Optional]</i></label>
    <textarea
      id="prompt"
      placeholder="Enter a prompt"
      rows="5"
      wrap="hard"
      style={{ width: "100%" }}
    >
    </textarea>
  </form>
  <button id="evaluate-image">Evaluate Image</button>
    </div>
    <canvas id="canvas" style={{ margin: "10px", objectFit: "contain", width: "95%"}}></canvas>
    </div>
</astro-upload>

<script>
  class AstroUpload extends HTMLElement {
    constructor() {
      super();
      const canvas = document.getElementById("canvas");
      const context = canvas.getContext("2d"); // Declare context outside the event listener
      canvas.width = 0;
      canvas.height = 0;
      const fileInput = document.getElementById("file-input");

      const handleAPICall = () => {
        const headers = {
          "Content-Type": "application/octet-stream",
          "Ocp-Apim-Subscription-Key": this.dataset.key,
        };

        canvas.toBlob((blob) => {
          if (!blob) {
            console.error("Error: No image blob available");
            return;
          }
          fetch(this.dataset.endpoint, {
            method: "POST",
            headers: headers,
            body: blob,
          })
            .then((response) => response.json())
            .then((data) => {
              console.log(data);
              const captionText = data.captionResult.text;

              const captionElement = document.getElementById("azure-caption");
              captionElement.textContent = captionText;
            })
            .catch((error) => {
              console.error("Error: ", error);
            });
        });
      };

      const button = document.getElementById("evaluate-image");
      button.addEventListener("click", () => {
        handleAPICall();
      });

      fileInput.addEventListener("change", () => {
        const selectedFile = fileInput.files[0];

        if (selectedFile) {
          const reader = new FileReader();

          reader.onload = function (e) {
            const img = new Image();
            img.onload = function () {
              // Calculate the aspect ratio of the image
              const aspectRatio = img.width / img.height;

              // Calculate the new dimensions to fit within 300x300
              let newWidth, newHeight;
              if (aspectRatio > 1) {
                newWidth = Math.min(img.width, 300);
                newHeight = newWidth / aspectRatio;
              } else {
                newHeight = Math.min(img.height, 300);
                newWidth = newHeight * aspectRatio;
              }

              // Adjust canvas size to the new dimensions
              canvas.width = newWidth;
              canvas.height = newHeight;

              // Draw the image on the canvas
              context.drawImage(img, 0, 0, newWidth, newHeight);
            };
            img.src = e.target.result;
          };
          reader.readAsDataURL(selectedFile);
        }
      });
    }
  }

  customElements.define("astro-upload", AstroUpload);
</script>
